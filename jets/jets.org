#+Title: Jets
#+Author: Simon Schnake
#+LATEX_HEADER: \usepackage{physics}
#+LATEX_HEADER: \usepackage{amssymb}
#+OPTIONS: toc:nil

* Planning                                                         :noexport:
* Setup                                                            :noexport:
Here are the needed packages. Also to config matplotlib for latex export
#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  # !cd /home/schnakes/master-thesis
  import matplotlib as mpl
  import matplotlib.pyplot as plt
  import matplotlib.mlab as mlab
  mpl.rcParams['text.usetex'] = True
  mpl.rcParams['text.latex.preamble'] = [r'\usepackage{amsmath}']
  mpl.rcParams['mathtext.fontset'] = 'stix'
  mpl.rcParams['font.family'] = 'STIXGeneral'
  mpl.rcParams['font.size'] = 15
  mpl.rcParams['axes.labelsize'] = 15
  %matplotlib inline
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[2]:
:END:

* Loading Data                                                     :noexport:
#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  import h5py

  try:
      data = h5py.File('./QCD_Pt-30to150Run2Spring18.h5', 'r')
  except OSError:
      print('Data not found')
  evVal = data['test_eventValues']
  pfVal = data['test_pfCanValues']
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[3]:
:END:

* Plots for SlimmedJet P_t Reco

#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  import numpy as np
  event_nr = evVal[:, 0]
  jet_nr = evVal[:, 1]
  event_weight = evVal[:, 2]
  jet_pt = evVal[:, 3]
  partonflavour = evVal[:, 6]
  genjet_pt = evVal[:, 7]
  genjet_eta = evVal[:, 8]
  genjet_phi = evVal[:, 9]
  R_reco = jet_pt/genjet_pt


#+END_SRC

#+RESULTS:
:RESULTS:
# Out[4]:
:END:

Data = RunIISpring18MiniAOD/QCD_Pt-15to3000_TuneCP5_Flat_13TeV_pythia8/MINIAODSIM/NoPUNoAging_100X_upgrade2018_realistic_v10-v1

\[ R = \frac{P_{T}^{{\text{reco}}}}{P_{T}^{{\text{gen}}}}\]


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  plt.hist(genjet_pt, bins=np.arange(30., 151., 10), log=True, alpha=0.75, color='#1f77b4')
  plt.xlim([30.,150.])
  # plt.ylim([10**2.,10**4.])
  plt.xlabel(r'Gen $P_{t}$')
  plt.ylabel(r'Numb. of Jets');
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[5]:
[[file:./obipy-resources/cR15yr.png]]
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  from scipy.stats import norm
  n, bins, patches = plt.hist(R_reco, bins=np.arange(0.,2.1,0.01), normed=1, alpha=0.75, color='#1f77b4')
  (loc, scale) = norm.fit(R_reco)
  pdf_x = np.linspace(0.0,2,100)
  pdf_y = norm.pdf(pdf_x, loc, scale)
  plt.plot(pdf_x,pdf_y, 'k--')
  plt.title(r'Gaus-Fit R-Distribution')
  plt.xlabel('R')
  plt.ylabel('pdf')
  plt.text(0, 2.5, r'$\mu=%.3f$'%loc)
  plt.text(0, 2.25, r'$\sigma=%f$'%scale);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[6]:
[[file:./obipy-resources/SX88a8.png]]
:END:
  
#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  from scipy.stats import t as student_t
  n, bins, patches = plt.hist(R_reco, bins=np.arange(0.,2.1,0.01), normed=1, alpha=0.75, color='#1f77b4')
  (df, loc, scale) = student_t.fit(R_reco)
  pdf_x = np.linspace(0.0,2,100)
  pdf_y = student_t.pdf(pdf_x, df, loc, scale)
  plt.plot(pdf_x,pdf_y, 'k--')
  pdf_y = norm.pdf(pdf_x, loc, scale)
  plt.title(r'$\text{student}_{\text{t}}$-Fit R-Distribution')
  plt.xlabel('R')
  plt.ylabel('pdf')
  plt.text(0, 2.5, r'$\mu=%.3f$'%loc)
  plt.text(0, 2.25, r'$\sigma=%f$'%scale);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[7]:
[[file:./obipy-resources/NLKODX.png]]
:END:

#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  plt.plot(genjet_pt, R_reco, 'b.', alpha=0.002)
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel('R')
  plt.ylim([0.,2.]);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[8]:
[[file:./obipy-resources/5QL6bn.png]]
:END:

#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  from scipy.stats import binned_statistic
  t_mean = lambda x: student_t.fit(x)[1]
  t_std = lambda x: student_t.fit(x)[2]

  x = binned_statistic(genjet_pt, genjet_pt, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt, R_reco, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt, R_reco, statistic=t_std, bins=25)[0]
  plt.errorbar(x, y, yerr=dy, fmt='o', color='k')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'$R$');
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[9]:
[[file:./obipy-resources/7aVk9t.png]]
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_pt[partonflavour == 21], genjet_pt[partonflavour == 21], statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt[partonflavour == 21], R_reco[partonflavour == 21], statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt[partonflavour == 21], R_reco[partonflavour == 21], statistic=t_std, bins=25)[0]
  plt.errorbar(x-1., y, yerr=dy, fmt='o', color='r', label='gluon')
  x = binned_statistic(genjet_pt[partonflavour < 21], genjet_pt[partonflavour < 21], statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt[partonflavour < 21], R_reco[partonflavour < 21], statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt[partonflavour < 21], R_reco[partonflavour < 21], statistic=t_std, bins=25)[0]
  plt.errorbar(x+1., y, yerr=dy, fmt='o', color='k', label='quark')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'$R$');
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[10]:
[[file:./obipy-resources/n20wtx.png]]
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export 
  x = binned_statistic(genjet_eta, genjet_eta, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_eta, R_reco, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_eta, R_reco, statistic=t_std, bins=25)[0]
  plt.errorbar(x, y, yerr=dy, fmt='o', color='k')
  plt.xlabel(r'GenJet $\eta$')
  plt.ylabel(r'$R$');
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[11]:
[[file:./obipy-resources/MyKEx2.png]]
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_phi, genjet_phi, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_phi, R_reco, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_phi, R_reco, statistic=t_std, bins=25)[0]
  plt.errorbar(x, y, yerr=dy, fmt='o', color='k')
  plt.xlabel(r'GenJet $\phi$')
  plt.ylabel(r'$R$');
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[12]:
[[file:./obipy-resources/2wDH06.png]]
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  plt.plot(genjet_pt, jet_pt, 'r.', alpha=0.002)
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'RecoJet $P_T$')
  plt.ylim([0., 200.]);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[13]:
[[file:./obipy-resources/itPcJO.png]]
:END:



#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_pt, genjet_pt, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt, jet_pt, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt, jet_pt, statistic=t_std, bins=25)[0]
  plt.errorbar(x, y, yerr=dy, fmt='o', color='k')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'$R$');
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[14]:
[[file:./obipy-resources/l3DNG0.png]]
:END:

* Plot for Neural Net

#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  from keras.layers import Input, Dense, Flatten
  from keras.models import Model

  inputs = Input(shape=(200, 4,))
  Dx = Flatten()(inputs)
  Dx = Dense(800, activation="relu")(Dx)
  Dx = Dense(700, activation="relu")(Dx)
  Dx = Dense(600, activation="relu")(Dx)
  Dx = Dense(500, activation="relu")(Dx)
  Dx = Dense(400, activation="relu")(Dx)
  Dx = Dense(300, activation="relu")(Dx)
  Dx = Dense(200, activation="relu")(Dx)
  Dx = Dense(1, activation="linear")(Dx)
  D = Model([inputs], [Dx], name='D')

  D.load_weights("first_weights.h5")

  jet_pt_nn = D.predict(pfVal).reshape(len(pfVal),)
  R_nn = jet_pt_nn/genjet_pt
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[15]:
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  plt.plot(genjet_pt, jet_pt, 'r.', alpha=0.002)
  plt.plot(genjet_pt, jet_pt_nn, 'b.', alpha=0.002)
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'RecoJet $P_T$')
  plt.ylim([0., 200.]);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[16]:
[[file:./obipy-resources/T3e2C5.png]]
:END:

#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_pt, genjet_pt, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt, jet_pt_nn, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt, jet_pt, statistic=t_std, bins=25)[0]
  plt.errorbar(x, y, yerr=dy, fmt='o', color='k')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'NNJet $P_T$');
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[17]:
[[file:./obipy-resources/RbGtji.png]]
:END:

#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  plt.hist(genjet_pt, bins=np.arange(30., 151., 10), log=True, alpha=0.65, color='r', label='GenJet')
  plt.hist(jet_pt_nn, bins=np.arange(30., 151., 10), log=True, alpha=0.65, color='#1f77b4', label='NNJet')
  plt.xlim([30.,150.])
  # plt.ylim([10**2.,10**4.])
  plt.xlabel(r'Gen $P_{t}$')
  plt.ylabel(r'Numb. of Jets')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[18]:
[[file:./obipy-resources/myK9cr.png]]
:END:


  
#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  from scipy.stats import t as student_t
  n, bins, patches = plt.hist(R_reco, bins=np.arange(0.,2.1,0.01), normed=1, alpha=0.75, color='r', label='RecoJet')
  n, bins, patches = plt.hist(R_nn, bins=np.arange(0.,2.1,0.01), normed=1, alpha=0.75, color='#1f77b4', label='NNJet')
  (df, loc, scale) = student_t.fit(R_nn)
  pdf_x = np.linspace(0.0,2,100)
  pdf_y = student_t.pdf(pdf_x, df, loc, scale)
  plt.plot(pdf_x,pdf_y, 'k--')
  plt.text(0, 3.5, r'$\mu_{\text{nn}}=%.3f$'%loc)
  plt.text(0, 3.25, r'$\sigma_{\text{nn}}=%.4f$'%scale)
  (df, loc, scale) = student_t.fit(R_reco)
  pdf_y = student_t.pdf(pdf_x, df, loc, scale)
  plt.text(0, 2.5, r'$\mu_{\text{reco}}=%.3f$'%loc)
  plt.text(0, 2.25, r'$\sigma_{\text{reco}}=%f$'%scale)
  plt.plot(pdf_x,pdf_y, 'k--')
  pdf_y = norm.pdf(pdf_x, loc, scale)
  plt.title(r'$\text{student}_{\text{t}}$-Fit R-Distribution')
  plt.xlabel('R')
  plt.ylabel('pdf')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[19]:
[[file:./obipy-resources/drsvk6.png]]
:END:



#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  plt.plot(genjet_pt, R_nn, '.', color='#1f77b4', alpha=0.003, label='NNJet')
  plt.plot(genjet_pt, R_reco, '.', color='r', alpha=0.002, label='RecoJet')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel('R')
  plt.ylim([0.,2.])
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[20]:
: (0.0, 2.0)
[[file:./obipy-resources/vjT3Sm.png]]
:END:

#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  from scipy.stats import binned_statistic
  t_mean = lambda x: student_t.fit(x)[1]
  t_std = lambda x: student_t.fit(x)[2]

  x = binned_statistic(genjet_pt, genjet_pt, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt, R_nn, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt, R_nn, statistic=t_std, bins=25)[0]
  plt.errorbar(x-1, y, yerr=dy, fmt='o', color='k', label='NNJet')
  y = binned_statistic(genjet_pt, R_reco, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt, R_reco, statistic=t_std, bins=25)[0]
  plt.errorbar(x+1, y, yerr=dy, fmt='o', color='r', label='RecoJet')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'$R$')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[21]:
[[file:./obipy-resources/m5i0Ez.png]]
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_pt[partonflavour == 21], genjet_pt[partonflavour == 21], statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt[partonflavour == 21], R_nn[partonflavour == 21], statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt[partonflavour == 21], R_nn[partonflavour == 21], statistic=t_std, bins=25)[0]
  plt.errorbar(x-1., y, yerr=dy, fmt='o', color='r', label='gluon')
  x = binned_statistic(genjet_pt[partonflavour < 21], genjet_pt[partonflavour < 21], statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt[partonflavour < 21], R_nn[partonflavour < 21], statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_pt[partonflavour < 21], R_nn[partonflavour < 21], statistic=t_std, bins=25)[0]
  plt.errorbar(x+1., y, yerr=dy, fmt='o', color='k', label='quark')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'$R$');
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[22]:
[[file:./obipy-resources/hDVT5Y.png]]
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export 
  x = binned_statistic(genjet_eta, genjet_eta, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_eta, R_nn, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_eta, R_nn, statistic=t_std, bins=25)[0]
  plt.errorbar(x+0.1, y, yerr=dy, fmt='o', color='k', label='NNJet')
  y = binned_statistic(genjet_eta, R_reco, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_eta, R_reco, statistic=t_std, bins=25)[0]
  plt.errorbar(x-0.1, y, yerr=dy, fmt='o', color='r', label='RecoJet')
  plt.xlabel(r'GenJet $\eta$')
  plt.ylabel(r'$R$')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[23]:
[[file:./obipy-resources/VLW9mE.png]]
:END:


#+BEGIN_SRC ipython :session :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_phi, genjet_phi, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_phi, R_nn, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_phi, R_nn, statistic=t_std, bins=25)[0]
  plt.errorbar(x+0.05, y, yerr=dy, fmt='o', color='k', label='NNJet')
  y = binned_statistic(genjet_phi, R_reco, statistic=t_mean, bins=25)[0]
  dy = binned_statistic(genjet_phi, R_reco, statistic=t_std, bins=25)[0]
  plt.errorbar(x-0.05, y, yerr=dy, fmt='o', color='r', label='RecoJet')
  plt.xlabel(r'GenJet $\phi$')
  plt.ylabel(r'$R$')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[24]:
[[file:./obipy-resources/eLXTXj.png]]
:END:

