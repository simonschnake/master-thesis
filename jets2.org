#+Title: Jets
#+Author: Simon Schnake
#+LATEX_HEADER: \usepackage{physics}
#+LATEX_HEADER: \usepackage{amssymb}
#+OPTIONS: toc:nil

* Setup                                                            :noexport:
Here are the needed packages. Also to config matplotlib for latex export


#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  # !cd /home/schnakes/master-thesis
  import matplotlib as mpl
  import matplotlib.pyplot as plt
  import matplotlib.mlab as mlab
  mpl.rcParams['text.usetex'] = True
  mpl.rcParams['text.latex.preamble'] = [r'\usepackage{amsmath}']
  mpl.rcParams['mathtext.fontset'] = 'stix'
  mpl.rcParams['font.family'] = 'STIXGeneral'
  mpl.rcParams['font.size'] = 15
  mpl.rcParams['axes.labelsize'] = 15
  %matplotlib inline

  import numpy as np
  import pickle
  from src.binned_estimation import binned_estimation
  from src.plot import plot
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

* JETVERTEILUNG

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  y = pickle.load(open('./results/y_values.p', 'rb'))

  event_nr = y[:, 0]
  jet_nr = y[:, 1]
  event_weight = y[:, 2]
  jet_pt = y[:, 3]
  partonflavour = y[:, 6]
  genjet_pt = y[:, 7]
  genjet_eta = y[:, 8]
  genjet_phi = y[:, 9]

 #+END_SRC

#+RESULTS:
:RESULTS:
:END:

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  plt.hist(genjet_pt, bins=np.arange(30., 151., 10), log=True, alpha=0.75, color='#1f77b4')
  plt.xlim([30.,150.])
  # plt.ylim([10**2.,10**4.])
  plt.xlabel(r'Gen $P_{T}$')
  plt.ylabel(r'Numb. of Jets');

  plt.savefig('images/jet_distri.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/5f4386913c9170d08c225cff32a522a73ce8363c.png]]
:END:

* JETNET
** Data Loading
#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  
  jetnet = pickle.load(open('./results/jetnet_binned2_results.p', 'rb'))

#+END_SRC

#+RESULTS:
:RESULTS:
:END:

** Scatter MSE

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports none :eval no-export

  func = lambda c, x: c[0]*x+c[1] 
  fig, ax = plt.subplots()
  plt.plot(genjet_pt[:10000], jet_pt[:10000]/genjet_pt[:10000], '.', alpha=0.25, markersize=3, color='#BF616A')
  plt.plot(genjet_pt[:10000], jetnet['first']['pred'][:10000]/genjet_pt[:10000], '.', alpha=0.25, markersize=3, color='k')
  
  plt.ylim([0., 2.])
  # plt.xlim([0.,10])

  plt.text(135, 0.5, 'MSE', ha='left', va='center', size=18, weight='bold', color='k')
  plt.text(135, 1.4, 'Reco', ha='left', va='center', size=18, color='#BF616A', weight='bold')
  plt.xlabel(r"$P_{T, \text{Gen}}$")
  plt.ylabel(r"$R$")

  ax.spines["top"].set_visible(False)
  ax.spines["right"].set_visible(False)  
  plt.savefig('images/jetnet_R_scatter.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/f365518cd0d457b5b8817d15a6eeac2aaf40738b.png]]
:END:

** Mean R
#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  fig, ax = plt.subplots()
  ax.spines["top"].set_visible(False)
  ax.spines["right"].set_visible(False)

  plot(genjet_pt, jet_pt, 'Reco', variable='R', color='k')
  plot(genjet_pt, jetnet['first']['pred'], 'MSE', variable='R', color='#c71585')
  plot(genjet_pt, jetnet['1']['pred'], '1st', variable='R', color='#0099cc')
  plot(genjet_pt, jetnet['4']['pred'], '2nd', variable='R',color='#a47439')

  plt.xlabel(r"$P_{T, \text{Gen}}$")
  plt.ylabel(r"$R$")
  plt.savefig('images/jetnet_R.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
[[file:./.ob-jupyter/b5c62157838c4aa1f11805bae1a2badcf03270b8.png]]
:END:

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  fig, ax = plt.subplots()
  ax.spines["top"].set_visible(False)
  ax.spines["right"].set_visible(False)

  plot(genjet_pt, jet_pt, 'Reco', variable='res', color='k')
  plot(genjet_pt, jetnet['first']['pred'], 'MSE', variable='res', color='#c71585')
  plot(genjet_pt, jetnet['1']['pred'], '1st', variable='res', color='#0099cc', textpos_y=0.01)
  plot(genjet_pt, jetnet['4']['pred'], '2nd', variable='res',color='#a47439', textpos_y=-0.01)
  
  plt.xlabel(r"$P_{T, \text{Gen}}$")
  plt.ylabel(r"$\sigma/\sqrt{P_{T, \text{Gen}}}$")
  plt.savefig('images/jetnet_res.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
[[file:./.ob-jupyter/4d18c98b3f1b09acbea702ffa5a121f59437f1b9.png]]
:END:

** sigma fit

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports none :eval no-export
  from scipy.stats import binned_statistic
  from scipy.optimize import leastsq

  x = binned_statistic(genjet_pt, jetnet['first']['pred'], statistic='mean', bins=50)[0]
  y = binned_statistic(genjet_pt, jetnet['first']['pred'], statistic='std', bins=50)[0]
  fitfunc = lambda c , x: c[0]*np.sqrt(x)+c[1]*x+c[2]
  errfunc = lambda c , x, y: (y - fitfunc(c, x))
  out = leastsq(errfunc, [1., 0.1, 0.], args=(x, y), full_output=1)
  c = out[0]

  plt.plot(x, y, 'k.')
  x = np.arange(30, 150, 2.5)
  plt.plot(x, fitfunc(c, x) , 'b-')

  plt.xlabel(r"$P_{T, \text{Gen}}$ [GeV]")
  plt.ylabel(r"$\sigma$ [GeV]")
  
  plt.xlim([30.,140])

  ax.spines["top"].set_visible(False)
  ax.spines["right"].set_visible(False)  
  plt.savefig('images/sigma_fit.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/bf34004d2d2031a69efa88217db5cb823a9a7986.png]]
:END:

** Loss Function

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports none :eval no-export
  val_loss = jetnet['first']['history']['val_loss']
  loss = jetnet['first']['history']['loss']
  plt.plot(np.arange(len(val_loss))+1, val_loss, 'k-')
  plt.plot(np.arange(len(loss))+1, loss, 'r-')

  plt.xlabel(r"$P_{T, \text{Gen}}$ [GeV]")
  plt.ylabel(r"$\sigma$ [GeV]")
  
  ax.spines["top"].set_visible(False)
  ax.spines["right"].set_visible(False)  
  #plt.savefig('images/sigma_fit.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/615e6948378fe7d46a1a4157116d4799a6cea132.png]]
:END:

* PFNET


#+RESULTS:
:RESULTS:
# Out[8]:
:END:

** Data Loading
#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  pfnet = pickle.load(open('./results/pfnet_binned_2_results.p', 'rb'))
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

** Scatter MSE

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports none :eval no-export

  func = lambda c, x: c[0]*x+c[1] 
  fig, ax = plt.subplots()
  plt.plot(genjet_pt[:10000], jet_pt[:10000]/genjet_pt[:10000], '.', alpha=0.25, markersize=3, color='#BF616A')
  plt.plot(genjet_pt[:10000], pfnet['first']['pred'][:10000]/genjet_pt[:10000], '.', alpha=0.25, markersize=3, color='k')
  
  plt.ylim([0., 2.])
  # plt.xlim([0.,10])

  plt.text(135, 0.5, 'MSE', ha='left', va='center', size=18, weight='bold', color='k')
  plt.text(135, 1.4, 'Reco', ha='left', va='center', size=18, color='#BF616A', weight='bold')
  plt.xlabel(r"$P_{T, \text{Gen}}$")
  plt.ylabel(r"$R$")

  ax.spines["top"].set_visible(False)
  ax.spines["right"].set_visible(False)  
  ax.spines["left"].set_visible(False)
  ax.spines["bottom"].set_visible(False)  
  plt.savefig('images/pfnet_R_scatter.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/d2351181442fd2c2f7cfda5d5332e0f59c763d61.png]]
:END:

** Mean R
#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  fig, ax = plt.subplots()
  ax.spines["top"].set_visible(False)
  ax.spines["right"].set_visible(False)
 
  plot(genjet_pt, jet_pt, 'Reco', variable='R', color='k')
  plot(genjet_pt, pfnet['first']['pred'], 'MSE', variable='R', color='#c71585', textpos_y=+0.005)
  plot(genjet_pt, pfnet['1']['pred'], '1st', variable='R', color='#0099cc')
  plot(genjet_pt, pfnet['8']['pred'], '2nd', variable='R',color='#a47439', textpos_y=-0.005)

  plt.xlabel(r"$P_{T, \text{Gen}}$")
  plt.ylabel(r"$R$")
  plt.savefig('images/pfnet_R.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
[[file:./.ob-jupyter/8c25e673dfc43a7a0494237f1adca3fe60365eb7.png]]
:END:

** Scatter MSE

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  fig, ax = plt.subplots()
  ax.spines["top"].set_visible(False)
  ax.spines["right"].set_visible(False)

  plot(genjet_pt, jet_pt, 'Reco', variable='res', color='k')
  plot(genjet_pt, pfnet['first']['pred'], 'MSE', variable='res', color='#c71585')
  plot(genjet_pt, pfnet['1']['pred'], '1st', variable='res', color='#0099cc', textpos_y=0.03)
  plot(genjet_pt, pfnet['8']['pred'], '2nd', variable='res',color='#a47439', textpos_y=-0.02)
 

  plt.xlabel(r"$P_{T, \text{Gen}}$")
  plt.ylabel(r"$\sigma/\sqrt{P_{T, \text{Gen}}}$")
  
  plt.savefig('images/pfnet_res.pdf', bbox_inches = 'tight', transparent=True)
#+END_SRC

#+RESULTS:
:RESULTS:
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
[[file:./.ob-jupyter/6224421980219f3c744fa3b798c4879e6f1a2c7c.png]]
:END:


* Comparison

*** Mean R

 #+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
   fig, ax = plt.subplots()
   ax.spines["top"].set_visible(False)
   ax.spines["right"].set_visible(False)
 
   plot(genjet_pt, jet_pt, 'Reco', variable='R', color='k')
   plot(genjet_pt, jetnet['4']['pred'], 'JETNET', variable='R', color='#0099cc', textpos_y=0.005)
   plot(genjet_pt, pfnet['8']['pred'], 'PFNET', variable='R',color='#a47439', textpos_y=-0.005)
   
   plt.ylim([0.9, 1.15])

   plt.xlabel(r"$P_{T, \text{Gen}}$")
   plt.ylabel(r"$R$")
   plt.savefig('images/comp_R.pdf', bbox_inches = 'tight', transparent=True)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
[[file:./.ob-jupyter/b0d3cfe05d7573f425720968ca45b40ffb71c2ee.png]]
 :END:


 #+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
   fig, ax = plt.subplots()
   ax.spines["top"].set_visible(False)
   ax.spines["right"].set_visible(False)

   plot(genjet_pt, jet_pt, 'Reco', variable='res', color='k')
   plot(genjet_pt, jetnet['4']['pred'], 'JETNET', variable='res', color='#0099cc', textpos_y=0.005)
   plot(genjet_pt, pfnet['8']['pred'], 'PFNET', variable='res',color='#a47439', textpos_y=-0.005)

   plt.xlabel(r"$P_{T, \text{Gen}}$")
   plt.ylabel(r"$R$")

   plt.xlabel(r"$P_{T, \text{Gen}}$")
   plt.ylabel(r"$\sigma/\sqrt{P_{T, \text{Gen}}}$")
   
   plt.savefig('images/comp_res.pdf', bbox_inches = 'tight', transparent=True)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
: 4.799954833984375
: 4.799954833984375
: 4.799954833984375
[[file:./.ob-jupyter/7ac04f54bcbf61a2c0b9805ea4663877c8838f85.png]]
 :END:

* Plots for other Values


#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
jet_pt_nn = pfnet['8']['pred']
R_nn = jet_pt_nn/genjet_pt
R_reco = jet_pt/genjet_pt
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[92]:
:END:

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  plt.plot(genjet_pt, jet_pt, 'r.', alpha=0.002)
  plt.plot(genjet_pt, jet_pt_nn, 'b.', alpha=0.002)
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'RecoJet $P_T$')
  plt.ylim([0., 200.]);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[93]:
[[file:./obipy-resources/tcgSEL.png]]
:END:

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_pt, genjet_pt, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt, jet_pt_nn, statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_pt, jet_pt, statistic='std', bins=25)[0]
  plt.errorbar(x, y, yerr=dy, fmt='o', color='k')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'NNJet $P_T$');
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[94]:
[[file:./obipy-resources/LrONR7.png]]
:END:

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  plt.hist(genjet_pt, bins=np.arange(30., 151., 10), log=True, alpha=0.65, color='r', label='GenJet')
  plt.hist(jet_pt_nn, bins=np.arange(30., 151., 10), log=True, alpha=0.65, color='#1f77b4', label='NNJet')
  plt.xlim([30.,150.])
  # plt.ylim([10**2.,10**4.])
  plt.xlabel(r'Gen $P_{t}$')
  plt.ylabel(r'Numb. of Jets')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[95]:
[[file:./obipy-resources/5RmPMo.png]]
:END:


  
#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  from scipy.stats import t as student_t
  from scipy.stats import norm
  n, bins, patches = plt.hist(R_reco, bins=np.arange(0.,2.1,0.01), normed=1, alpha=0.75, color='r', label='RecoJet')
  n, bins, patches = plt.hist(R_nn, bins=np.arange(0.,2.1,0.01), normed=1, alpha=0.75, color='#1f77b4', label='NNJet')
  (df, loc, scale) = student_t.fit(R_nn)
  pdf_x = np.linspace(0.0,2,100)
  pdf_y = student_t.pdf(pdf_x, df, loc, scale)
  plt.plot(pdf_x,pdf_y, 'k--')
  plt.text(0, 3.5, r'$\mu_{\text{nn}}=%.3f$'%loc)
  plt.text(0, 3.25, r'$\sigma_{\text{nn}}=%.4f$'%scale)
  (df, loc, scale) = student_t.fit(R_reco)
  pdf_y = student_t.pdf(pdf_x, df, loc, scale)
  plt.text(0, 2.5, r'$\mu_{\text{reco}}=%.3f$'%loc)
  plt.text(0, 2.25, r'$\sigma_{\text{reco}}=%f$'%scale)
  plt.plot(pdf_x,pdf_y, 'k--')
  pdf_y = norm.pdf(pdf_x, loc, scale)
  plt.title(r'$\text{student}_{\text{t}}$-Fit R-Distribution')
  plt.xlabel('R')
  plt.ylabel('pdf')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[98]:
[[file:./obipy-resources/MOC7Rp.png]]
:END:



#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  plt.plot(genjet_pt, R_nn, '.', color='#1f77b4', alpha=0.003, label='NNJet')
  plt.plot(genjet_pt, R_reco, '.', color='r', alpha=0.002, label='RecoJet')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel('R')
  plt.ylim([0.,2.])
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[99]:
: (0.0, 2.0)
[[file:./obipy-resources/15ugAZ.png]]
:END:

#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  from scipy.stats import binned_statistic

  x = binned_statistic(genjet_pt, genjet_pt, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt, R_nn, statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_pt, R_nn, statistic='std', bins=25)[0]
  plt.errorbar(x-1, y, yerr=dy, fmt='o', color='k', label='NNJet')
  y = binned_statistic(genjet_pt, R_reco, statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_pt, R_reco, statistic='std', bins=25)[0]
  plt.errorbar(x+1, y, yerr=dy, fmt='o', color='r', label='RecoJet')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'$R$')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[101]:
[[file:./obipy-resources/8cF920.png]]
:END:


#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_pt[partonflavour == 21], genjet_pt[partonflavour == 21], statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt[partonflavour == 21], R_nn[partonflavour == 21], statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_pt[partonflavour == 21], R_nn[partonflavour == 21], statistic='std', bins=25)[0]
  plt.errorbar(x-1., y, yerr=dy, fmt='o', color='r', label='gluon')
  x = binned_statistic(genjet_pt[partonflavour < 21], genjet_pt[partonflavour < 21], statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_pt[partonflavour < 21], R_nn[partonflavour < 21], statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_pt[partonflavour < 21], R_nn[partonflavour < 21], statistic='std', bins=25)[0]
  plt.errorbar(x+1., y, yerr=dy, fmt='o', color='k', label='quark')
  plt.xlabel(r'GenJet $P_T$')
  plt.ylabel(r'$R$');
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[102]:
[[file:./obipy-resources/YnRtW6.png]]
:END:


#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export 
  x = binned_statistic(genjet_eta, genjet_eta, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_eta, R_nn, statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_eta, R_nn, statistic='std', bins=25)[0]
  plt.errorbar(x+0.1, y, yerr=dy, fmt='o', color='k', label='NNJet')
  y = binned_statistic(genjet_eta, R_reco, statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_eta, R_reco, statistic='std', bins=25)[0]
  plt.errorbar(x-0.1, y, yerr=dy, fmt='o', color='r', label='RecoJet')
  plt.xlabel(r'GenJet $\eta$')
  plt.ylabel(r'$R$')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[103]:
[[file:./obipy-resources/CMIDBE.png]]
:END:


#+BEGIN_SRC jupyter-python :async "yes" :session "py" :results raw drawer :exports results :eval no-export
  x = binned_statistic(genjet_phi, genjet_phi, statistic='mean', bins=25)[0]
  y = binned_statistic(genjet_phi, R_nn, statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_phi, R_nn, statistic='std', bins=25)[0]
  plt.errorbar(x+0.05, y, yerr=dy, fmt='o', color='k', label='NNJet')
  y = binned_statistic(genjet_phi, R_reco, statistic='mean', bins=25)[0]
  dy = binned_statistic(genjet_phi, R_reco, statistic='std', bins=25)[0]
  plt.errorbar(x-0.05, y, yerr=dy, fmt='o', color='r', label='RecoJet')
  plt.xlabel(r'GenJet $\phi$')
  plt.ylabel(r'$R$')
  plt.legend(frameon=False);
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[104]:
[[file:./obipy-resources/w9WYjs.png]]
:END:



